// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef PROTOBUF_object_2eproto__INCLUDED
#define PROTOBUF_object_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "id.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_object_2eproto();
void protobuf_AssignDesc_object_2eproto();
void protobuf_ShutdownFile_object_2eproto();

class Obstacle;
class SemanticPoint;
class Slope;
class SlopeSets;
class Zone;

enum SemanticPoint_PointType {
  SemanticPoint_PointType_UN_KNOWN = 0,
  SemanticPoint_PointType_EXIT_POINT = 1,
  SemanticPoint_PointType_ENTRY_POINT = 2,
  SemanticPoint_PointType_TASK_POINT = 3,
  SemanticPoint_PointType_DEVICE_POINT = 4,
  SemanticPoint_PointType_UNCERTAIN = 5
};
bool SemanticPoint_PointType_IsValid(int value);
const SemanticPoint_PointType SemanticPoint_PointType_PointType_MIN = SemanticPoint_PointType_UN_KNOWN;
const SemanticPoint_PointType SemanticPoint_PointType_PointType_MAX = SemanticPoint_PointType_UNCERTAIN;
const int SemanticPoint_PointType_PointType_ARRAYSIZE = SemanticPoint_PointType_PointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SemanticPoint_PointType_descriptor();
inline const ::std::string& SemanticPoint_PointType_Name(SemanticPoint_PointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SemanticPoint_PointType_descriptor(), value);
}
inline bool SemanticPoint_PointType_Parse(
    const ::std::string& name, SemanticPoint_PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SemanticPoint_PointType>(
    SemanticPoint_PointType_descriptor(), name, value);
}
enum Zone_ZoneType {
  Zone_ZoneType_UN_KNOWN = 0,
  Zone_ZoneType_MINIING_SOIL = 1,
  Zone_ZoneType_DUMPING_SOIL = 2
};
bool Zone_ZoneType_IsValid(int value);
const Zone_ZoneType Zone_ZoneType_ZoneType_MIN = Zone_ZoneType_UN_KNOWN;
const Zone_ZoneType Zone_ZoneType_ZoneType_MAX = Zone_ZoneType_DUMPING_SOIL;
const int Zone_ZoneType_ZoneType_ARRAYSIZE = Zone_ZoneType_ZoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Zone_ZoneType_descriptor();
inline const ::std::string& Zone_ZoneType_Name(Zone_ZoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Zone_ZoneType_descriptor(), value);
}
inline bool Zone_ZoneType_Parse(
    const ::std::string& name, Zone_ZoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Zone_ZoneType>(
    Zone_ZoneType_descriptor(), name, value);
}
enum Obstacle_ObstacleType {
  Obstacle_ObstacleType_UN_KNOWN = 0,
  Obstacle_ObstacleType_TRUNK = 1,
  Obstacle_ObstacleType_PERSON = 2,
  Obstacle_ObstacleType_CAR = 3,
  Obstacle_ObstacleType_EXCAVATOR = 4,
  Obstacle_ObstacleType_UNCERTAIN = 5
};
bool Obstacle_ObstacleType_IsValid(int value);
const Obstacle_ObstacleType Obstacle_ObstacleType_ObstacleType_MIN = Obstacle_ObstacleType_UN_KNOWN;
const Obstacle_ObstacleType Obstacle_ObstacleType_ObstacleType_MAX = Obstacle_ObstacleType_UNCERTAIN;
const int Obstacle_ObstacleType_ObstacleType_ARRAYSIZE = Obstacle_ObstacleType_ObstacleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Obstacle_ObstacleType_descriptor();
inline const ::std::string& Obstacle_ObstacleType_Name(Obstacle_ObstacleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Obstacle_ObstacleType_descriptor(), value);
}
inline bool Obstacle_ObstacleType_Parse(
    const ::std::string& name, Obstacle_ObstacleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Obstacle_ObstacleType>(
    Obstacle_ObstacleType_descriptor(), name, value);
}
// ===================================================================

class SemanticPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap_proto.SemanticPoint) */ {
 public:
  SemanticPoint();
  virtual ~SemanticPoint();

  SemanticPoint(const SemanticPoint& from);

  inline SemanticPoint& operator=(const SemanticPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SemanticPoint& default_instance();

  void Swap(SemanticPoint* other);

  // implements Message ----------------------------------------------

  inline SemanticPoint* New() const { return New(NULL); }

  SemanticPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SemanticPoint& from);
  void MergeFrom(const SemanticPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SemanticPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SemanticPoint_PointType PointType;
  static const PointType UN_KNOWN =
    SemanticPoint_PointType_UN_KNOWN;
  static const PointType EXIT_POINT =
    SemanticPoint_PointType_EXIT_POINT;
  static const PointType ENTRY_POINT =
    SemanticPoint_PointType_ENTRY_POINT;
  static const PointType TASK_POINT =
    SemanticPoint_PointType_TASK_POINT;
  static const PointType DEVICE_POINT =
    SemanticPoint_PointType_DEVICE_POINT;
  static const PointType UNCERTAIN =
    SemanticPoint_PointType_UNCERTAIN;
  static inline bool PointType_IsValid(int value) {
    return SemanticPoint_PointType_IsValid(value);
  }
  static const PointType PointType_MIN =
    SemanticPoint_PointType_PointType_MIN;
  static const PointType PointType_MAX =
    SemanticPoint_PointType_PointType_MAX;
  static const int PointType_ARRAYSIZE =
    SemanticPoint_PointType_PointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointType_descriptor() {
    return SemanticPoint_PointType_descriptor();
  }
  static inline const ::std::string& PointType_Name(PointType value) {
    return SemanticPoint_PointType_Name(value);
  }
  static inline bool PointType_Parse(const ::std::string& name,
      PointType* value) {
    return SemanticPoint_PointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::hdmap_proto::Id& id() const;
  ::hdmap_proto::Id* mutable_id();
  ::hdmap_proto::Id* release_id();
  void set_allocated_id(::hdmap_proto::Id* id);

  // optional .hdmap_proto.SemanticPoint.PointType Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::hdmap_proto::SemanticPoint_PointType type() const;
  void set_type(::hdmap_proto::SemanticPoint_PointType value);

  // required .hdmap_proto.Vector3d pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::hdmap_proto::Vector3d& pos() const;
  ::hdmap_proto::Vector3d* mutable_pos();
  ::hdmap_proto::Vector3d* release_pos();
  void set_allocated_pos(::hdmap_proto::Vector3d* pos);

  // repeated .hdmap_proto.Id link_ids = 4;
  int link_ids_size() const;
  void clear_link_ids();
  static const int kLinkIdsFieldNumber = 4;
  const ::hdmap_proto::Id& link_ids(int index) const;
  ::hdmap_proto::Id* mutable_link_ids(int index);
  ::hdmap_proto::Id* add_link_ids();
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();
  const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;

  // @@protoc_insertion_point(class_scope:hdmap_proto.SemanticPoint)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::hdmap_proto::Vector3d* pos_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  int type_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static SemanticPoint* default_instance_;
};
// -------------------------------------------------------------------

class Zone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap_proto.Zone) */ {
 public:
  Zone();
  virtual ~Zone();

  Zone(const Zone& from);

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Zone& default_instance();

  void Swap(Zone* other);

  // implements Message ----------------------------------------------

  inline Zone* New() const { return New(NULL); }

  Zone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Zone& from);
  void MergeFrom(const Zone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Zone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Zone_ZoneType ZoneType;
  static const ZoneType UN_KNOWN =
    Zone_ZoneType_UN_KNOWN;
  static const ZoneType MINIING_SOIL =
    Zone_ZoneType_MINIING_SOIL;
  static const ZoneType DUMPING_SOIL =
    Zone_ZoneType_DUMPING_SOIL;
  static inline bool ZoneType_IsValid(int value) {
    return Zone_ZoneType_IsValid(value);
  }
  static const ZoneType ZoneType_MIN =
    Zone_ZoneType_ZoneType_MIN;
  static const ZoneType ZoneType_MAX =
    Zone_ZoneType_ZoneType_MAX;
  static const int ZoneType_ARRAYSIZE =
    Zone_ZoneType_ZoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ZoneType_descriptor() {
    return Zone_ZoneType_descriptor();
  }
  static inline const ::std::string& ZoneType_Name(ZoneType value) {
    return Zone_ZoneType_Name(value);
  }
  static inline bool ZoneType_Parse(const ::std::string& name,
      ZoneType* value) {
    return Zone_ZoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::hdmap_proto::Id& id() const;
  ::hdmap_proto::Id* mutable_id();
  ::hdmap_proto::Id* release_id();
  void set_allocated_id(::hdmap_proto::Id* id);

  // required .hdmap_proto.Polygon border = 2;
  bool has_border() const;
  void clear_border();
  static const int kBorderFieldNumber = 2;
  const ::hdmap_proto::Polygon& border() const;
  ::hdmap_proto::Polygon* mutable_border();
  ::hdmap_proto::Polygon* release_border();
  void set_allocated_border(::hdmap_proto::Polygon* border);

  // optional .hdmap_proto.Zone.ZoneType Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::hdmap_proto::Zone_ZoneType type() const;
  void set_type(::hdmap_proto::Zone_ZoneType value);

  // repeated .hdmap_proto.Id link_pre_ids = 4;
  int link_pre_ids_size() const;
  void clear_link_pre_ids();
  static const int kLinkPreIdsFieldNumber = 4;
  const ::hdmap_proto::Id& link_pre_ids(int index) const;
  ::hdmap_proto::Id* mutable_link_pre_ids(int index);
  ::hdmap_proto::Id* add_link_pre_ids();
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_pre_ids();
  const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_pre_ids() const;

  // repeated .hdmap_proto.Id link_suc_ids = 5;
  int link_suc_ids_size() const;
  void clear_link_suc_ids();
  static const int kLinkSucIdsFieldNumber = 5;
  const ::hdmap_proto::Id& link_suc_ids(int index) const;
  ::hdmap_proto::Id* mutable_link_suc_ids(int index);
  ::hdmap_proto::Id* add_link_suc_ids();
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_suc_ids();
  const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_suc_ids() const;

  // @@protoc_insertion_point(class_scope:hdmap_proto.Zone)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::hdmap_proto::Polygon* border_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_pre_ids_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_suc_ids_;
  int type_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Zone* default_instance_;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap_proto.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  void Swap(Obstacle* other);

  // implements Message ----------------------------------------------

  inline Obstacle* New() const { return New(NULL); }

  Obstacle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Obstacle_ObstacleType ObstacleType;
  static const ObstacleType UN_KNOWN =
    Obstacle_ObstacleType_UN_KNOWN;
  static const ObstacleType TRUNK =
    Obstacle_ObstacleType_TRUNK;
  static const ObstacleType PERSON =
    Obstacle_ObstacleType_PERSON;
  static const ObstacleType CAR =
    Obstacle_ObstacleType_CAR;
  static const ObstacleType EXCAVATOR =
    Obstacle_ObstacleType_EXCAVATOR;
  static const ObstacleType UNCERTAIN =
    Obstacle_ObstacleType_UNCERTAIN;
  static inline bool ObstacleType_IsValid(int value) {
    return Obstacle_ObstacleType_IsValid(value);
  }
  static const ObstacleType ObstacleType_MIN =
    Obstacle_ObstacleType_ObstacleType_MIN;
  static const ObstacleType ObstacleType_MAX =
    Obstacle_ObstacleType_ObstacleType_MAX;
  static const int ObstacleType_ARRAYSIZE =
    Obstacle_ObstacleType_ObstacleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObstacleType_descriptor() {
    return Obstacle_ObstacleType_descriptor();
  }
  static inline const ::std::string& ObstacleType_Name(ObstacleType value) {
    return Obstacle_ObstacleType_Name(value);
  }
  static inline bool ObstacleType_Parse(const ::std::string& name,
      ObstacleType* value) {
    return Obstacle_ObstacleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hdmap_proto.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::hdmap_proto::Id& id() const;
  ::hdmap_proto::Id* mutable_id();
  ::hdmap_proto::Id* release_id();
  void set_allocated_id(::hdmap_proto::Id* id);

  // required .hdmap_proto.Polygon border = 2;
  bool has_border() const;
  void clear_border();
  static const int kBorderFieldNumber = 2;
  const ::hdmap_proto::Polygon& border() const;
  ::hdmap_proto::Polygon* mutable_border();
  ::hdmap_proto::Polygon* release_border();
  void set_allocated_border(::hdmap_proto::Polygon* border);

  // optional double Height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  double height() const;
  void set_height(double value);

  // optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::hdmap_proto::Obstacle_ObstacleType type() const;
  void set_type(::hdmap_proto::Obstacle_ObstacleType value);

  // repeated .hdmap_proto.Id link_ids = 5;
  int link_ids_size() const;
  void clear_link_ids();
  static const int kLinkIdsFieldNumber = 5;
  const ::hdmap_proto::Id& link_ids(int index) const;
  ::hdmap_proto::Id* mutable_link_ids(int index);
  ::hdmap_proto::Id* add_link_ids();
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
      mutable_link_ids();
  const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
      link_ids() const;

  // @@protoc_insertion_point(class_scope:hdmap_proto.Obstacle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::hdmap_proto::Id* id_;
  ::hdmap_proto::Polygon* border_;
  double height_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id > link_ids_;
  int type_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Obstacle* default_instance_;
};
// -------------------------------------------------------------------

class Slope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap_proto.Slope) */ {
 public:
  Slope();
  virtual ~Slope();

  Slope(const Slope& from);

  inline Slope& operator=(const Slope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Slope& default_instance();

  void Swap(Slope* other);

  // implements Message ----------------------------------------------

  inline Slope* New() const { return New(NULL); }

  Slope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Slope& from);
  void MergeFrom(const Slope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Slope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nx = 1;
  bool has_nx() const;
  void clear_nx();
  static const int kNxFieldNumber = 1;
  ::google::protobuf::int32 nx() const;
  void set_nx(::google::protobuf::int32 value);

  // required int32 ny = 2;
  bool has_ny() const;
  void clear_ny();
  static const int kNyFieldNumber = 2;
  ::google::protobuf::int32 ny() const;
  void set_ny(::google::protobuf::int32 value);

  // optional uint32 flag = 3;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // optional double SlopeValue = 4;
  bool has_slopevalue() const;
  void clear_slopevalue();
  static const int kSlopeValueFieldNumber = 4;
  double slopevalue() const;
  void set_slopevalue(double value);

  // optional .hdmap_proto.Vector3d pos = 5;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  const ::hdmap_proto::Vector3d& pos() const;
  ::hdmap_proto::Vector3d* mutable_pos();
  ::hdmap_proto::Vector3d* release_pos();
  void set_allocated_pos(::hdmap_proto::Vector3d* pos);

  // optional .hdmap_proto.Vector3d normal = 6;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 6;
  const ::hdmap_proto::Vector3d& normal() const;
  ::hdmap_proto::Vector3d* mutable_normal();
  ::hdmap_proto::Vector3d* release_normal();
  void set_allocated_normal(::hdmap_proto::Vector3d* normal);

  // @@protoc_insertion_point(class_scope:hdmap_proto.Slope)
 private:
  inline void set_has_nx();
  inline void clear_has_nx();
  inline void set_has_ny();
  inline void clear_has_ny();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_slopevalue();
  inline void clear_has_slopevalue();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_normal();
  inline void clear_has_normal();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nx_;
  ::google::protobuf::int32 ny_;
  double slopevalue_;
  ::hdmap_proto::Vector3d* pos_;
  ::hdmap_proto::Vector3d* normal_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static Slope* default_instance_;
};
// -------------------------------------------------------------------

class SlopeSets : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hdmap_proto.SlopeSets) */ {
 public:
  SlopeSets();
  virtual ~SlopeSets();

  SlopeSets(const SlopeSets& from);

  inline SlopeSets& operator=(const SlopeSets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlopeSets& default_instance();

  void Swap(SlopeSets* other);

  // implements Message ----------------------------------------------

  inline SlopeSets* New() const { return New(NULL); }

  SlopeSets* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlopeSets& from);
  void MergeFrom(const SlopeSets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlopeSets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double pixSize = 2;
  bool has_pixsize() const;
  void clear_pixsize();
  static const int kPixSizeFieldNumber = 2;
  double pixsize() const;
  void set_pixsize(double value);

  // repeated .hdmap_proto.Slope item = 3;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 3;
  const ::hdmap_proto::Slope& item(int index) const;
  ::hdmap_proto::Slope* mutable_item(int index);
  ::hdmap_proto::Slope* add_item();
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Slope >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Slope >&
      item() const;

  // @@protoc_insertion_point(class_scope:hdmap_proto.SlopeSets)
 private:
  inline void set_has_pixsize();
  inline void clear_has_pixsize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double pixsize_;
  ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Slope > item_;
  friend void  protobuf_AddDesc_object_2eproto();
  friend void protobuf_AssignDesc_object_2eproto();
  friend void protobuf_ShutdownFile_object_2eproto();

  void InitAsDefaultInstance();
  static SlopeSets* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SemanticPoint

// required .hdmap_proto.Id id = 1;
inline bool SemanticPoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SemanticPoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SemanticPoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SemanticPoint::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& SemanticPoint::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SemanticPoint.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* SemanticPoint::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::hdmap_proto::Id;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SemanticPoint.id)
  return id_;
}
inline ::hdmap_proto::Id* SemanticPoint::release_id() {
  // @@protoc_insertion_point(field_release:hdmap_proto.SemanticPoint.id)
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void SemanticPoint::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.SemanticPoint.id)
}

// optional .hdmap_proto.SemanticPoint.PointType Type = 2;
inline bool SemanticPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SemanticPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SemanticPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SemanticPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::SemanticPoint_PointType SemanticPoint::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SemanticPoint.Type)
  return static_cast< ::hdmap_proto::SemanticPoint_PointType >(type_);
}
inline void SemanticPoint::set_type(::hdmap_proto::SemanticPoint_PointType value) {
  assert(::hdmap_proto::SemanticPoint_PointType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.SemanticPoint.Type)
}

// required .hdmap_proto.Vector3d pos = 3;
inline bool SemanticPoint::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SemanticPoint::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SemanticPoint::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SemanticPoint::clear_pos() {
  if (pos_ != NULL) pos_->::hdmap_proto::Vector3d::Clear();
  clear_has_pos();
}
inline const ::hdmap_proto::Vector3d& SemanticPoint::pos() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SemanticPoint.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::hdmap_proto::Vector3d* SemanticPoint::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::hdmap_proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SemanticPoint.pos)
  return pos_;
}
inline ::hdmap_proto::Vector3d* SemanticPoint::release_pos() {
  // @@protoc_insertion_point(field_release:hdmap_proto.SemanticPoint.pos)
  clear_has_pos();
  ::hdmap_proto::Vector3d* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SemanticPoint::set_allocated_pos(::hdmap_proto::Vector3d* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.SemanticPoint.pos)
}

// repeated .hdmap_proto.Id link_ids = 4;
inline int SemanticPoint::link_ids_size() const {
  return link_ids_.size();
}
inline void SemanticPoint::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& SemanticPoint::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SemanticPoint.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* SemanticPoint::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SemanticPoint.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* SemanticPoint::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.SemanticPoint.link_ids)
  return link_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
SemanticPoint::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.SemanticPoint.link_ids)
  return &link_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
SemanticPoint::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.SemanticPoint.link_ids)
  return link_ids_;
}

// -------------------------------------------------------------------

// Zone

// required .hdmap_proto.Id id = 1;
inline bool Zone::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zone::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zone::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zone::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Zone::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Zone::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::hdmap_proto::Id;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.id)
  return id_;
}
inline ::hdmap_proto::Id* Zone::release_id() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Zone.id)
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Zone::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Zone.id)
}

// required .hdmap_proto.Polygon border = 2;
inline bool Zone::has_border() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Zone::set_has_border() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Zone::clear_has_border() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Zone::clear_border() {
  if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
  clear_has_border();
}
inline const ::hdmap_proto::Polygon& Zone::border() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.border)
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::hdmap_proto::Polygon* Zone::mutable_border() {
  set_has_border();
  if (border_ == NULL) {
    border_ = new ::hdmap_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.border)
  return border_;
}
inline ::hdmap_proto::Polygon* Zone::release_border() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Zone.border)
  clear_has_border();
  ::hdmap_proto::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline void Zone::set_allocated_border(::hdmap_proto::Polygon* border) {
  delete border_;
  border_ = border;
  if (border) {
    set_has_border();
  } else {
    clear_has_border();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Zone.border)
}

// optional .hdmap_proto.Zone.ZoneType Type = 3;
inline bool Zone::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Zone::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Zone::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Zone::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::Zone_ZoneType Zone::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.Type)
  return static_cast< ::hdmap_proto::Zone_ZoneType >(type_);
}
inline void Zone::set_type(::hdmap_proto::Zone_ZoneType value) {
  assert(::hdmap_proto::Zone_ZoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Zone.Type)
}

// repeated .hdmap_proto.Id link_pre_ids = 4;
inline int Zone::link_pre_ids_size() const {
  return link_pre_ids_.size();
}
inline void Zone::clear_link_pre_ids() {
  link_pre_ids_.Clear();
}
inline const ::hdmap_proto::Id& Zone::link_pre_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.link_pre_ids)
  return link_pre_ids_.Get(index);
}
inline ::hdmap_proto::Id* Zone::mutable_link_pre_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.link_pre_ids)
  return link_pre_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Zone::add_link_pre_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Zone.link_pre_ids)
  return link_pre_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Zone::mutable_link_pre_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Zone.link_pre_ids)
  return &link_pre_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Zone::link_pre_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Zone.link_pre_ids)
  return link_pre_ids_;
}

// repeated .hdmap_proto.Id link_suc_ids = 5;
inline int Zone::link_suc_ids_size() const {
  return link_suc_ids_.size();
}
inline void Zone::clear_link_suc_ids() {
  link_suc_ids_.Clear();
}
inline const ::hdmap_proto::Id& Zone::link_suc_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Zone.link_suc_ids)
  return link_suc_ids_.Get(index);
}
inline ::hdmap_proto::Id* Zone::mutable_link_suc_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Zone.link_suc_ids)
  return link_suc_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Zone::add_link_suc_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Zone.link_suc_ids)
  return link_suc_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Zone::mutable_link_suc_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Zone.link_suc_ids)
  return &link_suc_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Zone::link_suc_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Zone.link_suc_ids)
  return link_suc_ids_;
}

// -------------------------------------------------------------------

// Obstacle

// required .hdmap_proto.Id id = 1;
inline bool Obstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacle::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
inline const ::hdmap_proto::Id& Obstacle::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Obstacle.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::hdmap_proto::Id* Obstacle::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::hdmap_proto::Id;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Obstacle.id)
  return id_;
}
inline ::hdmap_proto::Id* Obstacle::release_id() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Obstacle.id)
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Obstacle.id)
}

// required .hdmap_proto.Polygon border = 2;
inline bool Obstacle::has_border() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::set_has_border() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacle::clear_has_border() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacle::clear_border() {
  if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
  clear_has_border();
}
inline const ::hdmap_proto::Polygon& Obstacle::border() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Obstacle.border)
  return border_ != NULL ? *border_ : *default_instance_->border_;
}
inline ::hdmap_proto::Polygon* Obstacle::mutable_border() {
  set_has_border();
  if (border_ == NULL) {
    border_ = new ::hdmap_proto::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Obstacle.border)
  return border_;
}
inline ::hdmap_proto::Polygon* Obstacle::release_border() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Obstacle.border)
  clear_has_border();
  ::hdmap_proto::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_border(::hdmap_proto::Polygon* border) {
  delete border_;
  border_ = border;
  if (border) {
    set_has_border();
  } else {
    clear_has_border();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Obstacle.border)
}

// optional double Height = 3;
inline bool Obstacle::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double Obstacle::height() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Obstacle.Height)
  return height_;
}
inline void Obstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Obstacle.Height)
}

// optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
inline bool Obstacle::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::hdmap_proto::Obstacle_ObstacleType Obstacle::type() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Obstacle.Type)
  return static_cast< ::hdmap_proto::Obstacle_ObstacleType >(type_);
}
inline void Obstacle::set_type(::hdmap_proto::Obstacle_ObstacleType value) {
  assert(::hdmap_proto::Obstacle_ObstacleType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Obstacle.Type)
}

// repeated .hdmap_proto.Id link_ids = 5;
inline int Obstacle::link_ids_size() const {
  return link_ids_.size();
}
inline void Obstacle::clear_link_ids() {
  link_ids_.Clear();
}
inline const ::hdmap_proto::Id& Obstacle::link_ids(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Obstacle.link_ids)
  return link_ids_.Get(index);
}
inline ::hdmap_proto::Id* Obstacle::mutable_link_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Obstacle.link_ids)
  return link_ids_.Mutable(index);
}
inline ::hdmap_proto::Id* Obstacle::add_link_ids() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Obstacle.link_ids)
  return link_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >*
Obstacle::mutable_link_ids() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Obstacle.link_ids)
  return &link_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Id >&
Obstacle::link_ids() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Obstacle.link_ids)
  return link_ids_;
}

// -------------------------------------------------------------------

// Slope

// required int32 nx = 1;
inline bool Slope::has_nx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Slope::set_has_nx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Slope::clear_has_nx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Slope::clear_nx() {
  nx_ = 0;
  clear_has_nx();
}
inline ::google::protobuf::int32 Slope::nx() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.nx)
  return nx_;
}
inline void Slope::set_nx(::google::protobuf::int32 value) {
  set_has_nx();
  nx_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Slope.nx)
}

// required int32 ny = 2;
inline bool Slope::has_ny() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Slope::set_has_ny() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Slope::clear_has_ny() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Slope::clear_ny() {
  ny_ = 0;
  clear_has_ny();
}
inline ::google::protobuf::int32 Slope::ny() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.ny)
  return ny_;
}
inline void Slope::set_ny(::google::protobuf::int32 value) {
  set_has_ny();
  ny_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Slope.ny)
}

// optional uint32 flag = 3;
inline bool Slope::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Slope::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Slope::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Slope::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 Slope::flag() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.flag)
  return flag_;
}
inline void Slope::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Slope.flag)
}

// optional double SlopeValue = 4;
inline bool Slope::has_slopevalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Slope::set_has_slopevalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Slope::clear_has_slopevalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Slope::clear_slopevalue() {
  slopevalue_ = 0;
  clear_has_slopevalue();
}
inline double Slope::slopevalue() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.SlopeValue)
  return slopevalue_;
}
inline void Slope::set_slopevalue(double value) {
  set_has_slopevalue();
  slopevalue_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.Slope.SlopeValue)
}

// optional .hdmap_proto.Vector3d pos = 5;
inline bool Slope::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Slope::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Slope::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Slope::clear_pos() {
  if (pos_ != NULL) pos_->::hdmap_proto::Vector3d::Clear();
  clear_has_pos();
}
inline const ::hdmap_proto::Vector3d& Slope::pos() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::hdmap_proto::Vector3d* Slope::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::hdmap_proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Slope.pos)
  return pos_;
}
inline ::hdmap_proto::Vector3d* Slope::release_pos() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Slope.pos)
  clear_has_pos();
  ::hdmap_proto::Vector3d* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Slope::set_allocated_pos(::hdmap_proto::Vector3d* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Slope.pos)
}

// optional .hdmap_proto.Vector3d normal = 6;
inline bool Slope::has_normal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Slope::set_has_normal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Slope::clear_has_normal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Slope::clear_normal() {
  if (normal_ != NULL) normal_->::hdmap_proto::Vector3d::Clear();
  clear_has_normal();
}
inline const ::hdmap_proto::Vector3d& Slope::normal() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Slope.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::hdmap_proto::Vector3d* Slope::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::hdmap_proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Slope.normal)
  return normal_;
}
inline ::hdmap_proto::Vector3d* Slope::release_normal() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Slope.normal)
  clear_has_normal();
  ::hdmap_proto::Vector3d* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void Slope::set_allocated_normal(::hdmap_proto::Vector3d* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Slope.normal)
}

// -------------------------------------------------------------------

// SlopeSets

// required double pixSize = 2;
inline bool SlopeSets::has_pixsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlopeSets::set_has_pixsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlopeSets::clear_has_pixsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlopeSets::clear_pixsize() {
  pixsize_ = 0;
  clear_has_pixsize();
}
inline double SlopeSets::pixsize() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SlopeSets.pixSize)
  return pixsize_;
}
inline void SlopeSets::set_pixsize(double value) {
  set_has_pixsize();
  pixsize_ = value;
  // @@protoc_insertion_point(field_set:hdmap_proto.SlopeSets.pixSize)
}

// repeated .hdmap_proto.Slope item = 3;
inline int SlopeSets::item_size() const {
  return item_.size();
}
inline void SlopeSets::clear_item() {
  item_.Clear();
}
inline const ::hdmap_proto::Slope& SlopeSets::item(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.SlopeSets.item)
  return item_.Get(index);
}
inline ::hdmap_proto::Slope* SlopeSets::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.SlopeSets.item)
  return item_.Mutable(index);
}
inline ::hdmap_proto::Slope* SlopeSets::add_item() {
  // @@protoc_insertion_point(field_add:hdmap_proto.SlopeSets.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Slope >*
SlopeSets::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.SlopeSets.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::Slope >&
SlopeSets::item() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.SlopeSets.item)
  return item_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hdmap_proto::SemanticPoint_PointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::SemanticPoint_PointType>() {
  return ::hdmap_proto::SemanticPoint_PointType_descriptor();
}
template <> struct is_proto_enum< ::hdmap_proto::Zone_ZoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Zone_ZoneType>() {
  return ::hdmap_proto::Zone_ZoneType_descriptor();
}
template <> struct is_proto_enum< ::hdmap_proto::Obstacle_ObstacleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hdmap_proto::Obstacle_ObstacleType>() {
  return ::hdmap_proto::Obstacle_ObstacleType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_2eproto__INCLUDED
