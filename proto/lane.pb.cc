// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* Lane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lane_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lane_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lane_2eproto() {
  protobuf_AddDesc_lane_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lane.proto");
  GOOGLE_CHECK(file != NULL);
  Lane_descriptor_ = file->message_type(0);
  static const int Lane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, lines_),
  };
  Lane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Lane_descriptor_,
      Lane::default_instance_,
      Lane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _has_bits_[0]),
      -1,
      -1,
      sizeof(Lane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lane_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Lane_descriptor_, &Lane::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lane_2eproto() {
  delete Lane::default_instance_;
  delete Lane_reflection_;
}

void protobuf_AddDesc_lane_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lane_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_id_2eproto();
  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlane.proto\022\013hdmap_proto\032\010id.proto\032\016geo"
    "metry.proto\"J\n\004Lane\022\033\n\002id\030\001 \002(\0132\017.hdmap_"
    "proto.Id\022%\n\005lines\030\002 \003(\0132\026.hdmap_proto.Cu"
    "rveLine", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lane.proto", &protobuf_RegisterTypes);
  Lane::default_instance_ = new Lane();
  Lane::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lane_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lane_2eproto {
  StaticDescriptorInitializer_lane_2eproto() {
    protobuf_AddDesc_lane_2eproto();
  }
} static_descriptor_initializer_lane_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Lane)
}

void Lane::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
}

Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Lane)
}

void Lane::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lane_descriptor_;
}

const Lane& Lane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lane_2eproto();
  return *default_instance_;
}

Lane* Lane::default_instance_ = NULL;

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:hdmap_proto.Lane)
  if (has_id()) {
    if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  }
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }

      // repeated .hdmap_proto.CurveLine lines = 2;
      case 2: {
        if (tag == 18) {
         parse_lines:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Lane)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .hdmap_proto.CurveLine lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Lane)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // repeated .hdmap_proto.CurveLine lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lines(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Lane)
  return target;
}

int Lane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hdmap_proto.Lane)
  int total_size = 0;

  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }
  // repeated .hdmap_proto.CurveLine lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hdmap_proto.Lane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Lane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hdmap_proto.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hdmap_proto.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hdmap_proto.Lane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hdmap_proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hdmap_proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  std::swap(id_, other->id_);
  lines_.UnsafeArenaSwap(&other->lines_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lane_descriptor_;
  metadata.reflection = Lane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane

// required .hdmap_proto.Id id = 1;
bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_id() {
  if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
  clear_has_id();
}
const ::hdmap_proto::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::hdmap_proto::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::hdmap_proto::Id;
  }
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.id)
  return id_;
}
::hdmap_proto::Id* Lane::release_id() {
  // @@protoc_insertion_point(field_release:hdmap_proto.Lane.id)
  clear_has_id();
  ::hdmap_proto::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Lane::set_allocated_id(::hdmap_proto::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:hdmap_proto.Lane.id)
}

// repeated .hdmap_proto.CurveLine lines = 2;
int Lane::lines_size() const {
  return lines_.size();
}
void Lane::clear_lines() {
  lines_.Clear();
}
const ::hdmap_proto::CurveLine& Lane::lines(int index) const {
  // @@protoc_insertion_point(field_get:hdmap_proto.Lane.lines)
  return lines_.Get(index);
}
::hdmap_proto::CurveLine* Lane::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:hdmap_proto.Lane.lines)
  return lines_.Mutable(index);
}
::hdmap_proto::CurveLine* Lane::add_lines() {
  // @@protoc_insertion_point(field_add:hdmap_proto.Lane.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >*
Lane::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:hdmap_proto.Lane.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::hdmap_proto::CurveLine >&
Lane::lines() const {
  // @@protoc_insertion_point(field_list:hdmap_proto.Lane.lines)
  return lines_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
