// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* SemanticPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SemanticPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SemanticPoint_PointType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Zone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Zone_ZoneType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Obstacle_ObstacleType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Slope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slope_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlopeSets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlopeSets_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  SemanticPoint_descriptor_ = file->message_type(0);
  static const int SemanticPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, link_ids_),
  };
  SemanticPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SemanticPoint_descriptor_,
      SemanticPoint::default_instance_,
      SemanticPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemanticPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SemanticPoint));
  SemanticPoint_PointType_descriptor_ = SemanticPoint_descriptor_->enum_type(0);
  Zone_descriptor_ = file->message_type(1);
  static const int Zone_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, link_pre_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, link_suc_ids_),
  };
  Zone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_descriptor_,
      Zone::default_instance_,
      Zone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone));
  Zone_ZoneType_descriptor_ = Zone_descriptor_->enum_type(0);
  Obstacle_descriptor_ = file->message_type(2);
  static const int Obstacle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, link_ids_),
  };
  Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Obstacle_descriptor_,
      Obstacle::default_instance_,
      Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Obstacle));
  Obstacle_ObstacleType_descriptor_ = Obstacle_descriptor_->enum_type(0);
  Slope_descriptor_ = file->message_type(3);
  static const int Slope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, nx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, ny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, slopevalue_),
  };
  Slope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Slope_descriptor_,
      Slope::default_instance_,
      Slope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Slope));
  SlopeSets_descriptor_ = file->message_type(4);
  static const int SlopeSets_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlopeSets, pixsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlopeSets, item_),
  };
  SlopeSets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlopeSets_descriptor_,
      SlopeSets::default_instance_,
      SlopeSets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlopeSets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlopeSets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlopeSets));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SemanticPoint_descriptor_, &SemanticPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_descriptor_, &Zone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Obstacle_descriptor_, &Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Slope_descriptor_, &Slope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlopeSets_descriptor_, &SlopeSets::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete SemanticPoint::default_instance_;
  delete SemanticPoint_reflection_;
  delete Zone::default_instance_;
  delete Zone_reflection_;
  delete Obstacle::default_instance_;
  delete Obstacle_reflection_;
  delete Slope::default_instance_;
  delete Slope_reflection_;
  delete SlopeSets::default_instance_;
  delete SlopeSets_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_id_2eproto();
  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\022\013hdmap_proto\032\010id.proto\032\016g"
    "eometry.proto\"\224\002\n\rSemanticPoint\022\033\n\002id\030\001 "
    "\002(\0132\017.hdmap_proto.Id\0222\n\004Type\030\002 \001(\0162$.hdm"
    "ap_proto.SemanticPoint.PointType\022\"\n\003pos\030"
    "\003 \002(\0132\025.hdmap_proto.Vector3d\022!\n\010link_ids"
    "\030\004 \003(\0132\017.hdmap_proto.Id\"k\n\tPointType\022\014\n\010"
    "UN_KNOWN\020\000\022\016\n\nEXIT_POINT\020\001\022\017\n\013ENTRY_POIN"
    "T\020\002\022\016\n\nTASK_POINT\020\003\022\020\n\014DEVICE_POINT\020\004\022\r\n"
    "\tUNCERTAIN\020\005\"\377\001\n\004Zone\022\033\n\002id\030\001 \002(\0132\017.hdma"
    "p_proto.Id\022$\n\006border\030\002 \002(\0132\024.hdmap_proto"
    ".Polygon\022(\n\004Type\030\003 \001(\0162\032.hdmap_proto.Zon"
    "e.ZoneType\022%\n\014link_pre_ids\030\004 \003(\0132\017.hdmap"
    "_proto.Id\022%\n\014link_suc_ids\030\005 \003(\0132\017.hdmap_"
    "proto.Id\"<\n\010ZoneType\022\014\n\010UN_KNOWN\020\000\022\020\n\014MI"
    "NIING_SOIL\020\001\022\020\n\014DUMPING_SOIL\020\002\"\216\002\n\010Obsta"
    "cle\022\033\n\002id\030\001 \002(\0132\017.hdmap_proto.Id\022$\n\006bord"
    "er\030\002 \002(\0132\024.hdmap_proto.Polygon\022\016\n\006Height"
    "\030\003 \001(\001\0220\n\004Type\030\004 \001(\0162\".hdmap_proto.Obsta"
    "cle.ObstacleType\022!\n\010link_ids\030\005 \003(\0132\017.hdm"
    "ap_proto.Id\"Z\n\014ObstacleType\022\014\n\010UN_KNOWN\020"
    "\000\022\t\n\005TRUNK\020\001\022\n\n\006PERSON\020\002\022\007\n\003CAR\020\003\022\r\n\tEXC"
    "AVATOR\020\004\022\r\n\tUNCERTAIN\020\005\"A\n\005Slope\022\n\n\002nx\030\001"
    " \002(\005\022\n\n\002ny\030\002 \002(\005\022\014\n\004flag\030\003 \002(\r\022\022\n\nSlopeV"
    "alue\030\004 \001(\001\">\n\tSlopeSets\022\017\n\007pixSize\030\002 \002(\001"
    "\022 \n\004item\030\003 \003(\0132\022.hdmap_proto.Slope", 994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  SemanticPoint::default_instance_ = new SemanticPoint();
  Zone::default_instance_ = new Zone();
  Obstacle::default_instance_ = new Obstacle();
  Slope::default_instance_ = new Slope();
  SlopeSets::default_instance_ = new SlopeSets();
  SemanticPoint::default_instance_->InitAsDefaultInstance();
  Zone::default_instance_->InitAsDefaultInstance();
  Obstacle::default_instance_->InitAsDefaultInstance();
  Slope::default_instance_->InitAsDefaultInstance();
  SlopeSets::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SemanticPoint_PointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemanticPoint_PointType_descriptor_;
}
bool SemanticPoint_PointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SemanticPoint_PointType SemanticPoint::UN_KNOWN;
const SemanticPoint_PointType SemanticPoint::EXIT_POINT;
const SemanticPoint_PointType SemanticPoint::ENTRY_POINT;
const SemanticPoint_PointType SemanticPoint::TASK_POINT;
const SemanticPoint_PointType SemanticPoint::DEVICE_POINT;
const SemanticPoint_PointType SemanticPoint::UNCERTAIN;
const SemanticPoint_PointType SemanticPoint::PointType_MIN;
const SemanticPoint_PointType SemanticPoint::PointType_MAX;
const int SemanticPoint::PointType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SemanticPoint::kIdFieldNumber;
const int SemanticPoint::kTypeFieldNumber;
const int SemanticPoint::kPosFieldNumber;
const int SemanticPoint::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

SemanticPoint::SemanticPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.SemanticPoint)
}

void SemanticPoint::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  pos_ = const_cast< ::hdmap_proto::Vector3d*>(&::hdmap_proto::Vector3d::default_instance());
}

SemanticPoint::SemanticPoint(const SemanticPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.SemanticPoint)
}

void SemanticPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  type_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SemanticPoint::~SemanticPoint() {
  // @@protoc_insertion_point(destructor:hdmap_proto.SemanticPoint)
  SharedDtor();
}

void SemanticPoint::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete pos_;
  }
}

void SemanticPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SemanticPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemanticPoint_descriptor_;
}

const SemanticPoint& SemanticPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

SemanticPoint* SemanticPoint::default_instance_ = NULL;

SemanticPoint* SemanticPoint::New() const {
  return new SemanticPoint;
}

void SemanticPoint::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::hdmap_proto::Vector3d::Clear();
    }
  }
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SemanticPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.SemanticPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .hdmap_proto.SemanticPoint.PointType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::SemanticPoint_PointType_IsValid(value)) {
            set_type(static_cast< ::hdmap_proto::SemanticPoint_PointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .hdmap_proto.Vector3d pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.SemanticPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.SemanticPoint)
  return false;
#undef DO_
}

void SemanticPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.SemanticPoint)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .hdmap_proto.SemanticPoint.PointType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .hdmap_proto.Vector3d pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.SemanticPoint)
}

::google::protobuf::uint8* SemanticPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.SemanticPoint)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .hdmap_proto.SemanticPoint.PointType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .hdmap_proto.Vector3d pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 4;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.SemanticPoint)
  return target;
}

int SemanticPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .hdmap_proto.SemanticPoint.PointType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .hdmap_proto.Vector3d pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated .hdmap_proto.Id link_ids = 4;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SemanticPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SemanticPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SemanticPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SemanticPoint::MergeFrom(const SemanticPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::hdmap_proto::Vector3d::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SemanticPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticPoint::CopyFrom(const SemanticPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void SemanticPoint::Swap(SemanticPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SemanticPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SemanticPoint_descriptor_;
  metadata.reflection = SemanticPoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Zone_ZoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ZoneType_descriptor_;
}
bool Zone_ZoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Zone_ZoneType Zone::UN_KNOWN;
const Zone_ZoneType Zone::MINIING_SOIL;
const Zone_ZoneType Zone::DUMPING_SOIL;
const Zone_ZoneType Zone::ZoneType_MIN;
const Zone_ZoneType Zone::ZoneType_MAX;
const int Zone::ZoneType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Zone::kIdFieldNumber;
const int Zone::kBorderFieldNumber;
const int Zone::kTypeFieldNumber;
const int Zone::kLinkPreIdsFieldNumber;
const int Zone::kLinkSucIdsFieldNumber;
#endif  // !_MSC_VER

Zone::Zone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Zone)
}

void Zone::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  border_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

Zone::Zone(const Zone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Zone)
}

void Zone::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  border_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Zone)
  SharedDtor();
}

void Zone::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete border_;
  }
}

void Zone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_descriptor_;
}

const Zone& Zone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Zone* Zone::default_instance_ = NULL;

Zone* Zone::New() const {
  return new Zone;
}

void Zone::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
    }
    type_ = 0;
  }
  link_pre_ids_.Clear();
  link_suc_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Zone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_border;
        break;
      }

      // required .hdmap_proto.Polygon border = 2;
      case 2: {
        if (tag == 18) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional .hdmap_proto.Zone.ZoneType Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::Zone_ZoneType_IsValid(value)) {
            set_type(static_cast< ::hdmap_proto::Zone_ZoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_pre_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_pre_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_link_pre_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_pre_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_link_pre_ids;
        if (input->ExpectTag(42)) goto parse_link_suc_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_suc_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_link_suc_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_suc_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_suc_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Zone)
  return false;
#undef DO_
}

void Zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Zone)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required .hdmap_proto.Polygon border = 2;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->border(), output);
  }

  // optional .hdmap_proto.Zone.ZoneType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .hdmap_proto.Id link_pre_ids = 4;
  for (int i = 0; i < this->link_pre_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->link_pre_ids(i), output);
  }

  // repeated .hdmap_proto.Id link_suc_ids = 5;
  for (int i = 0; i < this->link_suc_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->link_suc_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Zone)
}

::google::protobuf::uint8* Zone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Zone)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required .hdmap_proto.Polygon border = 2;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->border(), target);
  }

  // optional .hdmap_proto.Zone.ZoneType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .hdmap_proto.Id link_pre_ids = 4;
  for (int i = 0; i < this->link_pre_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->link_pre_ids(i), target);
  }

  // repeated .hdmap_proto.Id link_suc_ids = 5;
  for (int i = 0; i < this->link_suc_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->link_suc_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Zone)
  return target;
}

int Zone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon border = 2;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

    // optional .hdmap_proto.Zone.ZoneType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .hdmap_proto.Id link_pre_ids = 4;
  total_size += 1 * this->link_pre_ids_size();
  for (int i = 0; i < this->link_pre_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_pre_ids(i));
  }

  // repeated .hdmap_proto.Id link_suc_ids = 5;
  total_size += 1 * this->link_suc_ids_size();
  for (int i = 0; i < this->link_suc_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_suc_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_pre_ids_.MergeFrom(from.link_pre_ids_);
  link_suc_ids_.MergeFrom(from.link_suc_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_border()) {
      mutable_border()->::hdmap_proto::Polygon::MergeFrom(from.border());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_pre_ids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->link_suc_ids())) return false;
  return true;
}

void Zone::Swap(Zone* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(border_, other->border_);
    std::swap(type_, other->type_);
    link_pre_ids_.Swap(&other->link_pre_ids_);
    link_suc_ids_.Swap(&other->link_suc_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_descriptor_;
  metadata.reflection = Zone_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Obstacle_ObstacleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_ObstacleType_descriptor_;
}
bool Obstacle_ObstacleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Obstacle_ObstacleType Obstacle::UN_KNOWN;
const Obstacle_ObstacleType Obstacle::TRUNK;
const Obstacle_ObstacleType Obstacle::PERSON;
const Obstacle_ObstacleType Obstacle::CAR;
const Obstacle_ObstacleType Obstacle::EXCAVATOR;
const Obstacle_ObstacleType Obstacle::UNCERTAIN;
const Obstacle_ObstacleType Obstacle::ObstacleType_MIN;
const Obstacle_ObstacleType Obstacle::ObstacleType_MAX;
const int Obstacle::ObstacleType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Obstacle::kIdFieldNumber;
const int Obstacle::kBorderFieldNumber;
const int Obstacle::kHeightFieldNumber;
const int Obstacle::kTypeFieldNumber;
const int Obstacle::kLinkIdsFieldNumber;
#endif  // !_MSC_VER

Obstacle::Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Obstacle)
}

void Obstacle::InitAsDefaultInstance() {
  id_ = const_cast< ::hdmap_proto::Id*>(&::hdmap_proto::Id::default_instance());
  border_ = const_cast< ::hdmap_proto::Polygon*>(&::hdmap_proto::Polygon::default_instance());
}

Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Obstacle)
}

void Obstacle::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  border_ = NULL;
  height_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete border_;
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_descriptor_;
}

const Obstacle& Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Obstacle* Obstacle::default_instance_ = NULL;

Obstacle* Obstacle::New() const {
  return new Obstacle;
}

void Obstacle::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != NULL) id_->::hdmap_proto::Id::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::hdmap_proto::Polygon::Clear();
    }
    height_ = 0;
    type_ = 0;
  }
  link_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hdmap_proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_border;
        break;
      }

      // required .hdmap_proto.Polygon border = 2;
      case 2: {
        if (tag == 18) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Height;
        break;
      }

      // optional double Height = 3;
      case 3: {
        if (tag == 25) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
      case 4: {
        if (tag == 32) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hdmap_proto::Obstacle_ObstacleType_IsValid(value)) {
            set_type(static_cast< ::hdmap_proto::Obstacle_ObstacleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        break;
      }

      // repeated .hdmap_proto.Id link_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_link_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_link_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Obstacle)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required .hdmap_proto.Polygon border = 2;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->border(), output);
  }

  // optional double Height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->link_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Obstacle)
}

::google::protobuf::uint8* Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Obstacle)
  // required .hdmap_proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required .hdmap_proto.Polygon border = 2;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->border(), target);
  }

  // optional double Height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated .hdmap_proto.Id link_ids = 5;
  for (int i = 0; i < this->link_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->link_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Obstacle)
  return target;
}

int Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hdmap_proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .hdmap_proto.Polygon border = 2;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

    // optional double Height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional .hdmap_proto.Obstacle.ObstacleType Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .hdmap_proto.Id link_ids = 5;
  total_size += 1 * this->link_ids_size();
  for (int i = 0; i < this->link_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_ids_.MergeFrom(from.link_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::hdmap_proto::Id::MergeFrom(from.id());
    }
    if (from.has_border()) {
      mutable_border()->::hdmap_proto::Polygon::MergeFrom(from.border());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->link_ids())) return false;
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(border_, other->border_);
    std::swap(height_, other->height_);
    std::swap(type_, other->type_);
    link_ids_.Swap(&other->link_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacle_descriptor_;
  metadata.reflection = Obstacle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Slope::kNxFieldNumber;
const int Slope::kNyFieldNumber;
const int Slope::kFlagFieldNumber;
const int Slope::kSlopeValueFieldNumber;
#endif  // !_MSC_VER

Slope::Slope()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Slope)
}

void Slope::InitAsDefaultInstance() {
}

Slope::Slope(const Slope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Slope)
}

void Slope::SharedCtor() {
  _cached_size_ = 0;
  nx_ = 0;
  ny_ = 0;
  flag_ = 0u;
  slopevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Slope::~Slope() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Slope)
  SharedDtor();
}

void Slope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Slope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slope_descriptor_;
}

const Slope& Slope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Slope* Slope::default_instance_ = NULL;

Slope* Slope::New() const {
  return new Slope;
}

void Slope::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Slope*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nx_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Slope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Slope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nx_)));
          set_has_nx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ny;
        break;
      }

      // required int32 ny = 2;
      case 2: {
        if (tag == 16) {
         parse_ny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ny_)));
          set_has_ny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // required uint32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_SlopeValue;
        break;
      }

      // optional double SlopeValue = 4;
      case 4: {
        if (tag == 33) {
         parse_SlopeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slopevalue_)));
          set_has_slopevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Slope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Slope)
  return false;
#undef DO_
}

void Slope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Slope)
  // required int32 nx = 1;
  if (has_nx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }

  // required int32 ny = 2;
  if (has_ny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // optional double SlopeValue = 4;
  if (has_slopevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slopevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Slope)
}

::google::protobuf::uint8* Slope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Slope)
  // required int32 nx = 1;
  if (has_nx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }

  // required int32 ny = 2;
  if (has_ny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // optional double SlopeValue = 4;
  if (has_slopevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slopevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Slope)
  return target;
}

int Slope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nx = 1;
    if (has_nx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nx());
    }

    // required int32 ny = 2;
    if (has_ny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ny());
    }

    // required uint32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional double SlopeValue = 4;
    if (has_slopevalue()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Slope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Slope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Slope::MergeFrom(const Slope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nx()) {
      set_nx(from.nx());
    }
    if (from.has_ny()) {
      set_ny(from.ny());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_slopevalue()) {
      set_slopevalue(from.slopevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Slope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slope::CopyFrom(const Slope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Slope::Swap(Slope* other) {
  if (other != this) {
    std::swap(nx_, other->nx_);
    std::swap(ny_, other->ny_);
    std::swap(flag_, other->flag_);
    std::swap(slopevalue_, other->slopevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Slope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slope_descriptor_;
  metadata.reflection = Slope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlopeSets::kPixSizeFieldNumber;
const int SlopeSets::kItemFieldNumber;
#endif  // !_MSC_VER

SlopeSets::SlopeSets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.SlopeSets)
}

void SlopeSets::InitAsDefaultInstance() {
}

SlopeSets::SlopeSets(const SlopeSets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.SlopeSets)
}

void SlopeSets::SharedCtor() {
  _cached_size_ = 0;
  pixsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlopeSets::~SlopeSets() {
  // @@protoc_insertion_point(destructor:hdmap_proto.SlopeSets)
  SharedDtor();
}

void SlopeSets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlopeSets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlopeSets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlopeSets_descriptor_;
}

const SlopeSets& SlopeSets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

SlopeSets* SlopeSets::default_instance_ = NULL;

SlopeSets* SlopeSets::New() const {
  return new SlopeSets;
}

void SlopeSets::Clear() {
  pixsize_ = 0;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlopeSets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.SlopeSets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double pixSize = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixsize_)));
          set_has_pixsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .hdmap_proto.Slope item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.SlopeSets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.SlopeSets)
  return false;
#undef DO_
}

void SlopeSets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.SlopeSets)
  // required double pixSize = 2;
  if (has_pixsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pixsize(), output);
  }

  // repeated .hdmap_proto.Slope item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.SlopeSets)
}

::google::protobuf::uint8* SlopeSets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.SlopeSets)
  // required double pixSize = 2;
  if (has_pixsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pixsize(), target);
  }

  // repeated .hdmap_proto.Slope item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.SlopeSets)
  return target;
}

int SlopeSets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double pixSize = 2;
    if (has_pixsize()) {
      total_size += 1 + 8;
    }

  }
  // repeated .hdmap_proto.Slope item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlopeSets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlopeSets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlopeSets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlopeSets::MergeFrom(const SlopeSets& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pixsize()) {
      set_pixsize(from.pixsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlopeSets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlopeSets::CopyFrom(const SlopeSets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlopeSets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void SlopeSets::Swap(SlopeSets* other) {
  if (other != this) {
    std::swap(pixsize_, other->pixsize_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlopeSets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlopeSets_descriptor_;
  metadata.reflection = SlopeSets_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
