// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hdmap_proto {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, high_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Map_descriptor_ = file->message_type(1);
  static const int Map_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, sections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, zones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, segpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, slopes_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hdmap_proto::protobuf_AddDesc_geometry_2eproto();
  ::hdmap_proto::protobuf_AddDesc_section_2eproto();
  ::hdmap_proto::protobuf_AddDesc_object_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\013hdmap_proto\032\016geometry.proto"
    "\032\rsection.proto\032\014object.proto\"\204\001\n\006Header"
    "\022\017\n\007version\030\001 \001(\t\022\014\n\004date\030\002 \001(\t\022\022\n\nproje"
    "ction\030\003 \001(\t\022\"\n\003low\030\004 \002(\0132\025.hdmap_proto.V"
    "ector3d\022#\n\004high\030\005 \002(\0132\025.hdmap_proto.Vect"
    "or3d\"\364\001\n\003Map\022#\n\006header\030\001 \001(\0132\023.hdmap_pro"
    "to.Header\022&\n\010sections\030\002 \003(\0132\024.hdmap_prot"
    "o.Section\022 \n\005zones\030\003 \003(\0132\021.hdmap_proto.Z"
    "one\022(\n\tobstacles\030\004 \003(\0132\025.hdmap_proto.Obs"
    "tacle\022,\n\010segPoint\030\005 \003(\0132\032.hdmap_proto.Se"
    "manticPoint\022&\n\006slopes\030\006 \001(\0132\026.hdmap_prot"
    "o.SlopeSets", 451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Map::default_instance_ = new Map();
  Header::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Header::kVersionFieldNumber;
const int Header::kDateFieldNumber;
const int Header::kProjectionFieldNumber;
const int Header::kLowFieldNumber;
const int Header::kHighFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Header)
}

void Header::InitAsDefaultInstance() {
  low_ = const_cast< ::hdmap_proto::Vector3d*>(&::hdmap_proto::Vector3d::default_instance());
  high_ = const_cast< ::hdmap_proto::Vector3d*>(&::hdmap_proto::Vector3d::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  low_ = NULL;
  high_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (projection_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete projection_;
  }
  if (this != default_instance_) {
    delete low_;
    delete high_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_projection()) {
      if (projection_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        projection_->clear();
      }
    }
    if (has_low()) {
      if (low_ != NULL) low_->::hdmap_proto::Vector3d::Clear();
    }
    if (has_high()) {
      if (high_ != NULL) high_->::hdmap_proto::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_projection;
        break;
      }

      // optional string projection = 3;
      case 3: {
        if (tag == 26) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->projection().data(), this->projection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "projection");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_low;
        break;
      }

      // required .hdmap_proto.Vector3d low = 4;
      case 4: {
        if (tag == 34) {
         parse_low:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_high;
        break;
      }

      // required .hdmap_proto.Vector3d high = 5;
      case 5: {
        if (tag == 42) {
         parse_high:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Header)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string projection = 3;
  if (has_projection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "projection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->projection(), output);
  }

  // required .hdmap_proto.Vector3d low = 4;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->low(), output);
  }

  // required .hdmap_proto.Vector3d high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->high(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Header)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string projection = 3;
  if (has_projection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "projection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->projection(), target);
  }

  // required .hdmap_proto.Vector3d low = 4;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->low(), target);
  }

  // required .hdmap_proto.Vector3d high = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->high(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string projection = 3;
    if (has_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projection());
    }

    // required .hdmap_proto.Vector3d low = 4;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low());
    }

    // required .hdmap_proto.Vector3d high = 5;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_projection()) {
      set_projection(from.projection());
    }
    if (from.has_low()) {
      mutable_low()->::hdmap_proto::Vector3d::MergeFrom(from.low());
    }
    if (from.has_high()) {
      mutable_high()->::hdmap_proto::Vector3d::MergeFrom(from.high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  if (has_low()) {
    if (!this->low().IsInitialized()) return false;
  }
  if (has_high()) {
    if (!this->high().IsInitialized()) return false;
  }
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(date_, other->date_);
    std::swap(projection_, other->projection_);
    std::swap(low_, other->low_);
    std::swap(high_, other->high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kHeaderFieldNumber;
const int Map::kSectionsFieldNumber;
const int Map::kZonesFieldNumber;
const int Map::kObstaclesFieldNumber;
const int Map::kSegPointFieldNumber;
const int Map::kSlopesFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hdmap_proto.Map)
}

void Map::InitAsDefaultInstance() {
  header_ = const_cast< ::hdmap_proto::Header*>(&::hdmap_proto::Header::default_instance());
  slopes_ = const_cast< ::hdmap_proto::SlopeSets*>(&::hdmap_proto::SlopeSets::default_instance());
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hdmap_proto.Map)
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  slopes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:hdmap_proto.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete slopes_;
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  if (_has_bits_[0 / 32] & 33) {
    if (has_header()) {
      if (header_ != NULL) header_->::hdmap_proto::Header::Clear();
    }
    if (has_slopes()) {
      if (slopes_ != NULL) slopes_->::hdmap_proto::SlopeSets::Clear();
    }
  }
  sections_.Clear();
  zones_.Clear();
  obstacles_.Clear();
  segpoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hdmap_proto.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hdmap_proto.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sections;
        break;
      }

      // repeated .hdmap_proto.Section sections = 2;
      case 2: {
        if (tag == 18) {
         parse_sections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sections;
        if (input->ExpectTag(26)) goto parse_zones;
        break;
      }

      // repeated .hdmap_proto.Zone zones = 3;
      case 3: {
        if (tag == 26) {
         parse_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zones;
        if (input->ExpectTag(34)) goto parse_obstacles;
        break;
      }

      // repeated .hdmap_proto.Obstacle obstacles = 4;
      case 4: {
        if (tag == 34) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_obstacles;
        if (input->ExpectTag(42)) goto parse_segPoint;
        break;
      }

      // repeated .hdmap_proto.SemanticPoint segPoint = 5;
      case 5: {
        if (tag == 42) {
         parse_segPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_segPoint;
        if (input->ExpectTag(50)) goto parse_slopes;
        break;
      }

      // optional .hdmap_proto.SlopeSets slopes = 6;
      case 6: {
        if (tag == 50) {
         parse_slopes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slopes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hdmap_proto.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hdmap_proto.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hdmap_proto.Map)
  // optional .hdmap_proto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .hdmap_proto.Section sections = 2;
  for (int i = 0; i < this->sections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sections(i), output);
  }

  // repeated .hdmap_proto.Zone zones = 3;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zones(i), output);
  }

  // repeated .hdmap_proto.Obstacle obstacles = 4;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obstacles(i), output);
  }

  // repeated .hdmap_proto.SemanticPoint segPoint = 5;
  for (int i = 0; i < this->segpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->segpoint(i), output);
  }

  // optional .hdmap_proto.SlopeSets slopes = 6;
  if (has_slopes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->slopes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hdmap_proto.Map)
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hdmap_proto.Map)
  // optional .hdmap_proto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .hdmap_proto.Section sections = 2;
  for (int i = 0; i < this->sections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sections(i), target);
  }

  // repeated .hdmap_proto.Zone zones = 3;
  for (int i = 0; i < this->zones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zones(i), target);
  }

  // repeated .hdmap_proto.Obstacle obstacles = 4;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->obstacles(i), target);
  }

  // repeated .hdmap_proto.SemanticPoint segPoint = 5;
  for (int i = 0; i < this->segpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->segpoint(i), target);
  }

  // optional .hdmap_proto.SlopeSets slopes = 6;
  if (has_slopes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->slopes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hdmap_proto.Map)
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hdmap_proto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .hdmap_proto.SlopeSets slopes = 6;
    if (has_slopes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slopes());
    }

  }
  // repeated .hdmap_proto.Section sections = 2;
  total_size += 1 * this->sections_size();
  for (int i = 0; i < this->sections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections(i));
  }

  // repeated .hdmap_proto.Zone zones = 3;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }

  // repeated .hdmap_proto.Obstacle obstacles = 4;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .hdmap_proto.SemanticPoint segPoint = 5;
  total_size += 1 * this->segpoint_size();
  for (int i = 0; i < this->segpoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segpoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  sections_.MergeFrom(from.sections_);
  zones_.MergeFrom(from.zones_);
  obstacles_.MergeFrom(from.obstacles_);
  segpoint_.MergeFrom(from.segpoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::hdmap_proto::Header::MergeFrom(from.header());
    }
    if (from.has_slopes()) {
      mutable_slopes()->::hdmap_proto::SlopeSets::MergeFrom(from.slopes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->zones())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->segpoint())) return false;
  if (has_slopes()) {
    if (!this->slopes().IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    sections_.Swap(&other->sections_);
    zones_.Swap(&other->zones_);
    obstacles_.Swap(&other->obstacles_);
    segpoint_.Swap(&other->segpoint_);
    std::swap(slopes_, other->slopes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap_proto

// @@protoc_insertion_point(global_scope)
